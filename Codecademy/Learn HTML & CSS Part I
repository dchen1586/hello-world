//Common HTML Elements

<meta charset="utf-8"/>: Tells the web browser which character set to use. In this case, the character set is "utf-8". 
header tags go from h1 to h6

<!DOCTYPE html>
<html>
<head>
  <title>Animals Around the World</title>
</head>
<body>
  <h1>The Brown Bear</h1>
  <p>The brown bear (Ursus arctos) is native to parts of northern Eurasia and North America. Its conservation status is currently "Least Concern." There are many subspecies within the brown bear species, including the Atlas bear and the Himalayan brown bear.</p>
  <a href="https://en.wikipedia.org/wiki/Brown_bear" target="_blank">Learn More</a>
  <!--lists of bear stuff-->
  <p>The following are subspecies of bears:</p>
  <ul>
    <li>Arctos</li>
    <li>Collarus</li>
    <li>Horribilis</li>
    <li>Nelsoni (extinct)</li>
  </ul>
  <p>The following countries have the largest populations<br /> of brown bears:</p>
  <ol>
    <li>Russia</li>
    <li>United States</li>
    <li>Canada</li>
  </ol>
  <a href="https://en.wikipedia.org/wiki/Brown_bear" target="_blank"><img src="https://s3.amazonaws.com/codecademy-content/courses/web-101/web101-image_brownbear.jpg" alt="a photo of a brown bear"/></a>
</body> 
</html>

video
<video width="320" height="240" controls>
  <source src="video-url.mp4" type="video/mp4">
</video>

The video element uses a number of attributes. Let's take a look at them:

    width and height: Set the size of the screen that displays the video.

    controls: Adds play, pause and volume control.

    source src: Sets the URL of the video to play.

    type: Specifies different video formats.

//Colors, 5

body {
  padding: 0;
  margin: 0;
  background: #f7f7f7;
  /* Old browsers */
  background: -moz-linear-gradient(45deg, #f7f7f7 0%, #EAE0D5 100%);
  /* FF3.6-15 */
  background: -webkit-linear-gradient(45deg, #f7f7f7 0%, #EAE0D5 100%);
  /* Chrome10-25,Safari5.1-6 */
  background: linear-gradient(45deg, #f7f7f7 0%, #EAE0D5 100%);
}

/** Header styles **/

.header {
  background-image: url("https://s3.amazonaws.com/codecademy-content/courses/web-101/unit-4/htmlcss1-img_coffee-bgnd.jpeg");
  height: 400px;
  background-position: center center;
  color: #452F73;
}

h1 {
  
  
  font-family: 'Covered By Your Grace', sans-serif;
  font-size: 100px;
  line-height: 76px;
  margin: 0;
  position: relative;
  text-align: center;
  top: 20%;
}

/** List style **/

h2 {
  color: #E4BB97;
  font-family: 'Raleway', sans-serif;
  font-size: 28px;
  font-weight: 500;
  text-align: left;
  text-transform: uppercase;
  background-color: #AA8EB5;
}

ul {
  margin: 0 auto;
  padding: 0;
  width: 50%;
}

li {
  border-bottom: 1px solid #E4BB97;
  list-style: none;
  margin: 100px 0px;
  padding-bottom: 60px;
}

p {
  color: #444444;
  line-height: 32px;
  font-family: 'Raleway', sans-serif;
  font-size: 20px;
  font-weight: 100;
}

a {
  color: #214E34;
  font-family: 'Raleway', sans-serif;
  font-size: 13px;
  font-weight: 900;
  text-align: left;
  text-transform: uppercase;
  text-decoration: none;
  letter-spacing: 2px;
}

/*
linking to style.css
<link href="https://www.codecademy.com/stylesheets/style.css" type="text/css" rel="stylesheet">
<link href="style.css" type="text/css" rel="stylesheet">

if writing CSS code in html, use <style></style> within <head></head>

color (name, rgb(#,#,#), #_____, hsl(0-360,0-100%,0-100%) hue saturation lightness, rgba() a-opacity, 0-1 inclusive, hsla()
  multiple color declarations to make sure browser can support one of them
background-color
font-family
  if multiple words, use " "
  declare a couple at once as fallbacks: Garamond, Times, serif;
font-size
  px-pixel em-em %
  approx 14px - 117% - .875 em
line-height, typically in ems
word-spacing, typically 0.25 ems
letter-spacing (kerning)
font-weight, normal or bold or 100 (thin), 200, 300, 400 (normal weight), 500, 600, 700, 800, or 900 (bold).
font-style, normal or italic
text-transform, uppercase or lowercase
text-align, left, center, right
  
link fonts within the html file in <head>: <link href="https://fonts.googleapis.com/css?family=Raleway" type="text/css" rel="stylesheet" >

ID
<div  id="header-text"> 
<h1 id="botswana">Botswana</h1>

#botswana {
  background-color: #56ABFF;
}

CLASS
<div class="partner"> 

.science {
  font-family: Georgia, Times, serif;
  color: #A3B4C5;
  text-transform: uppercase;
}

all science classes
.science {

select the p elements from the science class:
p.science { 

selecting more than one class:
.first, .last {

<h1 class="book domestic">The Way of the Deep</h1>
<h1 class="book foreign">A Night in the Sky</h1>

.book {
  font-family: Georgia, serif;
}

.domestic {
  font-color: #0902CC;
}

.foreign {
  font-color: #B097DD;
}

<div class="container">
  <h1 class="title">Alice In Wonderland</h1>
  <p> ... </p>
</div>

div.container {
  background-color: rgb(252, 255, 205);
  font-family: Roboto, Helvetica, sans-serif;
}

h1.title {
  color: #0D1A2F;
}

>>>BOXES

width / height, can be specified with px, em, %. Latter two preferred for scaling.
min-width / min-height, also max-
overflow: can be set to hidden or scroll

border-style property. This property can take on one of the following values:

    solid - border is a solid line.
    dashed - border is a series of lines or dashes.
    dotted - border is a series of square dots.
    double - border is two solid black lines.
    groove - border is a groove (or carving).
    inset - border appears to cut into the screen.
    outset - border appears to pop out of the screen.
    ridge - border appears as a picture frame.
    hidden or none
    
border-width, set in px OR thin, medium, thick. if different on four sides, then 3px 1px 2px 1px; (top, right, bottom, left). if only individual borders, use the following:
    border-top-width
    border-right-width
    border-bottom-width
    border-left-width

border-color, same as color above

  border-style: solid;
  border-width: 3px;
  border-color: rgb(22, 77, 100);
   ^is equivalent to below. make sure to use width style color order
  border: 3px solid rgb(22, 77, 100);

border-radius, px or %. 100% makes it a circle

padding, space between box and box contents on all 4 sides. it is added to the width and height set for the box, but this can be avoided
  similarly to border-width, padding can be set differently on all 4 sides 3px 1px 2px 1px; (top, right, bottom, left)
  if top and bottom, left and right are the same, can denote as 5px 10px; instead of writing out all four
  
    padding-top
    padding-right
    padding-bottom
    padding-left

margin, space directly outside box. prevents other elements from being in this space.
  similarly to border-width, padding can be set differently on all 4 sides 3px 1px 2px 1px; (top, right, bottom, left)
  shortcut also applies when top/bottom, left/right the same
  can also be set to auto, which will auto center the element. however, the width of the box must be set first.
  
    margin-top
    margin-right
    margin-bottom
    margin-left
    
'user agent' stylesheet: web browsers have default stylesheets in case one does not exist. often have defaults; it may make sense to clear these to have a clean slate:
  * {
  margin: 0;
  padding: 0;
  }

Inline elements, elements that 
inline with text, without disrupting the flow of the text (like links).
Block-level elements, elements that use an entire line of space in a web page and disrupt the natural flow of text. Most of the common HTML elements are block-level elements (headings, paragraphs, divs, and more).

display, can change the behavior of these elements. can take on 4 values:
    inline - causes block-level elements (like a div) to behave like an inline element (like a link).
    block - causes inline elements (like a link) to behave like a block element (like a div).
    inline-block - causes block-level elements to behave like an inline element, but retain the features of a block-level element.
    none - removes an element from view. The rest of the web page will act as if the element does not exist.
  example: list as inline, can become a navigation menu
    flex - makes all elements align horizontally
flex-wrap: wrap; prevents elements from falling off the page
justify-content: center; centers elements

visibility, can take hidden or visible values

display: none and visibility: hidden? An element with display: none will be completely removed from the web page. An element with visibility: hidden, however, will not be visible on the web page, but the space reserved for it will. 

box-sizing, controls the type of box model the browser should use when interpreting a web page. default value is content-box. border-box is the alternative, where the dimensions of the box will always be static

---

block level elements appear on left by default

position, used to specify where elements appear
    static - the default value (it does not need to be specified)
    relative - four offset values below can be set to px, em, or %
      top - moves the element down.
      bottom - moves the element up.
      left - moves the element right.
      right - moves the element left.
    absolute - other elements will act as if it doesn't exist
    fixed - element will stay where it is regardless of scrolling
    
z-index, controls how far "back" or how far "forward" an element should appear on the web page
  given an integer value, tells browser order of appearance
  does not work on static elements
  bigger numbers are 'in front' of lower numbers
  
float, pushes elements to the farthest left/right
  works on relative and static elements
  must have width specified, or will take up the entire width of containing element
  
clear, specifies how elements should behave when they bump into each other on the page
    left — the left side of the element will not touch any other element within the same containing element.
    right — the right side of the element will not touch any other element within the same containing element.
    both — neither side of the element will touch any other element within the same containing element.
    none — the element can touch either side.

<img src="#" alt="A red leaf" class="leaf" />
img.leaf {
  width: 350px;
  height: 200px; 
}

images are in-line, but to be centered correctly, need to be recharacterized as block elements. make sure to change display type to block when centering
can use float for aligning left or right

background-image: url(" ... ");
  background-image: -webkit-linear-gradient(#FFD194, #BC1324); this will create a color gradient background

background-repeat, images tile by default; use to avoid/customize this behavior
    repeat - the default value — the image will repeat horizontally and vertically.
    repeat-x - the background image will be repeated only along the x-axis (horizontally).
    repeat-y - the background image will be repeated only along the y-axis (vertically).
    no-repeat - the background image will not be repeated at all and will appear only once.
    
background-position, values are denoted with two words. if only one is specified, the second will default to center
    left top - top left corner of the element's box.
    center top - top center of the element's box.
    right top - top right corner of the element's box.
    left center - left column, center row.
    center center - the center of the element's box.
    right center - right column, center row.
    left bottom - bottom left corner of the element's box.
    center bottom - bottom center of the element's box.
    right bottom - bottom right corner of the element's box.

all three background elements can be set with 'background':

p {
  background-image: url("#");
  background-repeat: no-repeat;
  background-position: right center;
}
===
p {
  background: url("#") no-repeat right center;
}

background-size, cover and contain are the two most common values. contain will most likely cause white space.

    cover - expands the image as large as possible to cover the full width or height of a container. If the dimensions of the container (say, a div) are larger than the dimensions of the image, the image will become distorted. This value is best for images that don't communicate important content to the user, like background images.

    contain - expands the image as large as possible, but the image will be letterboxed, which means it won't cover the full width or height of a container.
    
background-attachment, can take one of two values:

    scroll - this value allows the image to move up and down as a user scrolls on the web page (this is the default value).
    fixed - this value pins the image's position on the page.

When an image communicates important information, you can use the <img> element and style the image using CSS, if needed.
When an image is intended to style a web page, you can use the background property and further style it with CSS.

<table>
</table>
<tr>
</tr> adds table row
<td>    </td> table data
<th>    </th> table heading

scope takes the values of 'col' or 'row', see below

<table>
  <tr>
    <th></th>
    <th scope="col">Saturday</th>
    <th scope="col">Sunday</th>
  </tr>
  <tr>
    <th scope="row">Temperature</th>
    <td>73</td>
    <td>81</td>
  </tr>
</table>

set table border in css:
table, td {
  border: 1px solid black;
}

colspan and rowspan
    <td rowspan="2">Work</td>
    
<tbody>
</tbody>, used to section off code for large tables

<thead>
</thead>, used to section off table header code

<tfoot>
</tfoot>, used for footer, usually number totals or similar

setting table styling in css:
table, th, td {
  border: 1px solid black;
  font-family: Arial, sans-serif;
  text-align: center;
}

contact-btn a:active {
:active is a psuedo-class selector, which we use to style an element only while it's being clicked.

&copy is a character code, which web browsers interpret as the copyright symbol: ©

Bootstrap classes:

    row: Arranges HTML elements in rows, and can be useful when building headers/navigation menus, main feature sections, supporting content sections and footers.

    jumbotron: Used to create large showcase sections featuring important content.

    col-sm-*: Used to span a specified number of columns on the Bootstrap grid. The "sm" is short for "small", and maintains desired CSS layouts on small screens (tablet-sized).

    text-right: Bootstrap class used to orient text to the right side of the webpage.

    btn btn-primary: Bootstrap class used to style page elements as buttons.

*/
